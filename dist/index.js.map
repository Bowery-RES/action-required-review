{"version":3,"file":"index.js","sources":["../webpack://required-review/./src/main.js","../webpack://required-review/./src/paths.js","../webpack://required-review/./src/reporter.js","../webpack://required-review/./src/requirement.js","../webpack://required-review/./src/reviewers.js","../webpack://required-review/./src/team-members.js","../webpack://required-review/C:\\Users\\Xiaomi\\AppData\\Roaming\\npm\\node_modules\\@vercel\\ncc\\dist\\ncc\\@@notfound.js","../webpack://required-review/external \"assert\"","../webpack://required-review/external \"fs\"","../webpack://required-review/webpack/bootstrap","../webpack://required-review/webpack/runtime/compat","../webpack://required-review/webpack/startup"],"sourcesContent":["const core = require( '@actions/core' );\r\nconst fs = require( 'fs' );\r\nconst yaml = require( 'js-yaml' );\r\n\r\nconst reporter = require( './reporter.js' );\r\nconst Requirement = require( './requirement.js' );\r\n\r\n/**\r\n * Load the requirements yaml file.\r\n *\r\n * @returns {Requirement[]} Requirements.\r\n */\r\nasync function getRequirements() {\r\n\tlet reqirementsString = core.getInput( 'requirements' );\r\n\r\n\tif ( ! reqirementsString ) {\r\n\t\tconst filename = core.getInput( 'requirements-file' );\r\n\t\tif ( ! filename ) {\r\n\t\t\tthrow new reporter.ReportError(\r\n\t\t\t\t'Requirements are not found',\r\n\t\t\t\tnew Error( 'Either `requirements` or `requirements-file` input is required' ),\r\n\t\t\t\t{}\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\treqirementsString = fs.readFileSync( filename, 'utf8' );\r\n\t\t} catch ( error ) {\r\n\t\t\tthrow new reporter.ReportError(\r\n\t\t\t\t`Requirements file ${ filename } could not be read`,\r\n\t\t\t\terror,\r\n\t\t\t\t{}\r\n\t\t\t);\r\n\t\t}\r\n\t} else if ( core.getInput( 'requirements-file' ) ) {\r\n\t\tcore.warning( 'Ignoring input `requirements-file` because `requirements` was given' );\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst requirements = yaml.load( reqirementsString, {\r\n\t\t\tonWarning: w => core.warning( `Yaml: ${ w.message }` ),\r\n\t\t} );\r\n\t\tif ( ! Array.isArray( requirements ) ) {\r\n\t\t\tthrow new Error( 'Requirements file does not contain an array' );\r\n\t\t}\r\n\r\n\t\treturn requirements.map( ( r, i ) => new Requirement( { name: `#${ i }`, ...r } ) );\r\n\t} catch ( error ) {\r\n\t\terror[ Symbol.toStringTag ] = 'Error'; // Work around weird check in WError.\r\n\t\tthrow new reporter.ReportError( 'Requirements are not valid', error, {} );\r\n\t}\r\n}\r\n\r\n/**\r\n * Action entry point.\r\n */\r\nasync function main() {\r\n\ttry {\r\n\t\tconst requirements = await getRequirements();\r\n\t\tcore.startGroup( `Loaded ${ requirements.length } review requirement(s)` );\r\n\r\n\t\tconst reviewers = await require( './reviewers.js' )();\r\n\t\tcore.startGroup( `Found ${ reviewers.length } reviewer(s)` );\r\n\t\treviewers.forEach( r => core.info( r ) );\r\n\t\tcore.endGroup();\r\n\r\n\t\tconst paths = await require( './paths.js' )();\r\n\t\tcore.startGroup( `PR affects ${ paths.length } file(s)` );\r\n\t\tpaths.forEach( p => core.info( p ) );\r\n\t\tcore.endGroup();\r\n\r\n\t\tconst matchedPaths = [];\r\n\t\tlet ok = true;\r\n\t\tfor ( let i = 0; i < requirements.length; i++ ) {\r\n\t\t\tconst r = requirements[ i ];\r\n\t\t\tcore.startGroup( `Checking requirement \"${ r.name }\"...` );\r\n\t\t\tif ( ! r.appliesToPaths( paths, matchedPaths ) ) {\r\n\t\t\t\tcore.endGroup();\r\n\t\t\t\tcore.info( `Requirement \"${ r.name }\" does not apply to any files in this PR.` );\r\n\t\t\t} else if ( await r.isSatisfied( reviewers ) ) {\r\n\t\t\t\tcore.endGroup();\r\n\t\t\t\tcore.info( `Requirement \"${ r.name }\" is satisfied by the existing reviews.` );\r\n\t\t\t} else {\r\n\t\t\t\tok = false;\r\n\t\t\t\tcore.endGroup();\r\n\t\t\t\tcore.error( `Requirement \"${ r.name }\" is not satisfied by the existing reviews.` );\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( ok ) {\r\n\t\t\tawait reporter.status( reporter.STATE_SUCCESS, 'All required reviews have been provided!' );\r\n\t\t} else {\r\n\t\t\tawait reporter.status(\r\n\t\t\t\treporter.STATE_PENDING,\r\n\t\t\t\treviewers.length ? 'Awaiting more reviews...' : 'Awaiting reviews...'\r\n\t\t\t);\r\n\t\t}\r\n\t} catch ( error ) {\r\n\t\tlet err, state, description;\r\n\t\tif ( error instanceof reporter.ReportError ) {\r\n\t\t\terr = error.cause();\r\n\t\t\tstate = reporter.STATE_FAILURE;\r\n\t\t\tdescription = error.message;\r\n\t\t} else {\r\n\t\t\terr = error;\r\n\t\t\tstate = reporter.STATE_ERROR;\r\n\t\t\tdescription = 'Action encountered an error';\r\n\t\t}\r\n\t\tcore.setFailed( err.message );\r\n\t\tcore.info( err.stack );\r\n\t\tif ( core.getInput( 'token' ) && core.getInput( 'status' ) ) {\r\n\t\t\tawait reporter.status( state, description );\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmain();\r\n","const core = require( '@actions/core' );\r\nconst github = require( '@actions/github' );\r\nconst { WError } = require( 'error' );\r\n\r\n/**\r\n * Fetch the paths in the current PR.\r\n *\r\n * @returns {string[]} Paths.\r\n */\r\nasync function fetchPaths() {\r\n\tconst octokit = github.getOctokit( core.getInput( 'token', { required: true } ) );\r\n\tconst owner = github.context.payload.repository.owner.login;\r\n\tconst repo = github.context.payload.repository.name;\r\n\tconst pr = github.context.payload.pull_request.number;\r\n\r\n\tconst paths = {};\r\n\ttry {\r\n\t\tfor await ( const res of octokit.paginate.iterator( octokit.pulls.listFiles, {\r\n\t\t\towner: owner,\r\n\t\t\trepo: repo,\r\n\t\t\tpull_number: pr,\r\n\t\t\tper_page: 100,\r\n\t\t} ) ) {\r\n\t\t\tres.data.forEach( file => {\r\n\t\t\t\tpaths[ file.filename ] = true;\r\n\t\t\t\tif ( file.previous_filename ) {\r\n\t\t\t\t\tpaths[ file.previous_filename ] = true;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\t} catch ( error ) {\r\n\t\tthrow new WError(\r\n\t\t\t`Failed to query ${ owner }/${ repo } PR #${ pr } files from GitHub`,\r\n\t\t\terror,\r\n\t\t\t{}\r\n\t\t);\r\n\t}\r\n\r\n\treturn Object.keys( paths ).sort();\r\n}\r\n\r\nmodule.exports = fetchPaths;\r\n","const core = require( '@actions/core' );\r\nconst github = require( '@actions/github' );\r\nconst { WError } = require( 'error' );\r\n\r\nconst STATE_ERROR = 'error';\r\nconst STATE_FAILURE = 'failure';\r\nconst STATE_PENDING = 'pending';\r\nconst STATE_SUCCESS = 'success';\r\n\r\n/**\r\n * Report a status check to GitHub.\r\n *\r\n * @param {string} state - One of the `STATE_*` constants.\r\n * @param {string} description - Description for the status.\r\n */\r\nasync function status( state, description ) {\r\n\tconst octokit = github.getOctokit( core.getInput( 'token', { required: true } ) );\r\n\tconst owner = github.context.payload.repository.owner.login;\r\n\tconst repo = github.context.payload.repository.name;\r\n\tconst req = {\r\n\t\towner: owner,\r\n\t\trepo: repo,\r\n\t\tsha: github.context.payload.pull_request.head.sha,\r\n\t\tstate: state,\r\n\t\ttarget_url: `https://github.com/${ owner }/${ repo }/actions/runs/${ github.context.runId }`,\r\n\t\tdescription: description,\r\n\t\tcontext: core.getInput( 'status', { required: true } ),\r\n\t};\r\n\r\n\tif ( process.env.CI ) {\r\n\t\tawait octokit.repos.createCommitStatus( req );\r\n\t} else {\r\n\t\t// eslint-disable-next-line no-console\r\n\t\tconsole.dir( req );\r\n\t}\r\n}\r\n\r\n/**\r\n * Error class for friendly GitHub Action error reporting.\r\n *\r\n * Use it like\r\n * ```\r\n * throw ReportError.create( 'Status description', originalError );\r\n * ```\r\n */\r\nclass ReportError extends WError {}\r\n\r\nmodule.exports = {\r\n\tSTATE_ERROR: STATE_ERROR,\r\n\tSTATE_FAILURE: STATE_FAILURE,\r\n\tSTATE_PENDING: STATE_PENDING,\r\n\tSTATE_SUCCESS: STATE_SUCCESS,\r\n\tstatus: status,\r\n\tReportError: ReportError,\r\n};\r\nmodule.exports.default = module.exports;\r\n","const assert = require( 'assert' );\r\nconst core = require( '@actions/core' );\r\nconst { SError } = require( 'error' );\r\nconst picomatch = require( 'picomatch' );\r\n\r\nconst fetchTeamMembers = require( './team-members.js' );\r\n\r\nclass RequirementError extends SError {}\r\n\r\n/**\r\n * Prints a result set, then returns it.\r\n *\r\n * @param {string} label - Label for the set.\r\n * @param {string[]} items - Items to print. If an empty array, will print `<empty set>` instead.\r\n * @returns {string[]} `items`.\r\n */\r\nfunction printSet( label, items ) {\r\n\tcore.info( label + ' ' + ( items.length ? items.join( ', ' ) : '<empty set>' ) );\r\n\treturn items;\r\n}\r\n\r\n/**\r\n * Build a reviewer team membership filter.\r\n *\r\n * @param {object} config - Requirements configuration object being processed.\r\n * @param {Array|string|object} teamConfig - Team name, or single-key object with a list of teams/objects, or array of such.\r\n * @param {string} indent - String for indentation.\r\n * @returns {Function} Function to filter an array of reviewers by membership in the team(s).\r\n */\r\nfunction buildReviewerFilter( config, teamConfig, indent ) {\r\n\tif ( typeof teamConfig === 'string' ) {\r\n\t\tconst team = teamConfig;\r\n\t\treturn async function ( reviewers ) {\r\n\t\t\tconst members = await fetchTeamMembers( team );\r\n\t\t\treturn printSet(\r\n\t\t\t\t`${ indent }Members of ${ team }:`,\r\n\t\t\t\treviewers.filter( reviewer => members.includes( reviewer ) )\r\n\t\t\t);\r\n\t\t};\r\n\t}\r\n\r\n\tlet keys;\r\n\ttry {\r\n\t\tkeys = Object.keys( teamConfig );\r\n\t\tassert( keys.length === 1 );\r\n\t} catch {\r\n\t\tthrow new RequirementError( 'Expected a team name or a single-keyed object.', {\r\n\t\t\tconfig: config,\r\n\t\t\tvalue: teamConfig,\r\n\t\t} );\r\n\t}\r\n\r\n\tconst op = keys[ 0 ];\r\n\tlet arg = teamConfig[ op ];\r\n\r\n\tswitch ( op ) {\r\n\t\tcase 'any-of':\r\n\t\tcase 'all-of':\r\n\t\tcase 'two-of':\r\n\t\t\t// These ops require an array of teams/objects.\r\n\t\t\tif ( ! Array.isArray( arg ) ) {\r\n\t\t\t\tthrow new RequirementError( `Expected an array of teams, got ${ typeof arg }`, {\r\n\t\t\t\t\tconfig: config,\r\n\t\t\t\t\tvalue: arg,\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\tif ( ! arg.length === 0 ) {\r\n\t\t\t\tthrow new RequirementError( 'Expected a non-empty array of teams', {\r\n\t\t\t\t\tconfig: config,\r\n\t\t\t\t\tvalue: teamConfig,\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\targ = arg.map( t => buildReviewerFilter( config, t, `${ indent }  ` ) );\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new RequirementError( `Unrecognized operation \"${ op }\"`, {\r\n\t\t\t\tconfig: config,\r\n\t\t\t\tvalue: teamConfig,\r\n\t\t\t} );\r\n\t}\r\n\r\n\tif ( op === 'any-of' ) {\r\n\t\treturn async function ( reviewers ) {\r\n\t\t\tcore.info( `${ indent }Union of these:` );\r\n\t\t\treturn printSet( `${ indent }=>`, [\r\n\t\t\t\t...new Set(\r\n\t\t\t\t\t( await Promise.all( arg.map( f => f( reviewers, `${ indent }  ` ) ) ) ).flat( 1 )\r\n\t\t\t\t),\r\n\t\t\t] );\r\n\t\t};\r\n\t}\r\n\r\n\tif ( op === 'all-of' ) {\r\n\t\treturn async function ( reviewers ) {\r\n\t\t\tcore.info( `${ indent }Union of these, if none are empty:` );\r\n\t\t\tconst filtered = await Promise.all( arg.map( f => f( reviewers, `${ indent }  ` ) ) );\r\n\t\t\tif ( filtered.some( a => a.length === 0 ) ) {\r\n\t\t\t\treturn printSet( `${ indent }=>`, [] );\r\n\t\t\t}\r\n\t\t\treturn printSet( `${ indent }=>`, [ ...new Set( filtered.flat( 1 ) ) ] );\r\n\t\t};\r\n\t}\r\n\r\n\tif ( op === 'two-of' ) {\r\n\t\treturn async function ( reviewers ) {\r\n\t\t\tcore.info( `${ indent }Union of these, if none are empty:` );\r\n\t\t\tconst teamsApprovals = await Promise.all( arg.map( f => f( reviewers, `${ indent }  ` ) ) );\r\n\r\n\t\t\tcore.info( `${ indent }Test teams ${JSON.stringify(teamsApprovals)}:` );\r\n\r\n\t\t\tconst teamsApprovalsCount = teamsApprovals.filter(approvals => approvals.length >= 1).length;\r\n\r\n\t\t\tif (teamsApprovalsCount < 2) {\r\n\t\t\t\treturn printSet( `${ indent }=>`, [] );\r\n\t\t\t}\r\n\r\n\t\t\treturn printSet( `${ indent }=>`, [ ...new Set( teams.flat( 1 ) ) ] );\r\n\t\t};\r\n\t}\r\n\r\n\tthrow new RequirementError( `Unrecognized operation \"${ op }\"`, {\r\n\t\tconfig: config,\r\n\t\tvalue: teamConfig,\r\n\t} );\r\n}\r\n\r\n/**\r\n * Class representing an individual requirement.\r\n */\r\nclass Requirement {\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {object} config - Object config\r\n\t * @param {string[]|string} config.paths - Paths this requirement applies to. Either an array of picomatch globs, or the string \"unmatched\".\r\n\t * @param {Array} config.teams - Team reviews requirements.\r\n\t */\r\n\tconstructor( config ) {\r\n\t\tthis.name = config.name || 'Unnamed requirement';\r\n\r\n\t\tif ( config.paths === 'unmatched' ) {\r\n\t\t\tthis.pathsFilter = null;\r\n\t\t} else if (\r\n\t\t\tArray.isArray( config.paths ) &&\r\n\t\t\tconfig.paths.every( v => typeof v === 'string' )\r\n\t\t) {\r\n\t\t\tthis.pathsFilter = picomatch( config.paths, { dot: true } );\r\n\t\t} else {\r\n\t\t\tthrow new RequirementError( 'Paths must be an array of strings, or the string \"unmatched\".', {\r\n\t\t\t\tconfig: config,\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\tthis.reviewerFilter = buildReviewerFilter( config, { 'any-of': config.teams }, '  ' );\r\n\t}\r\n\r\n\t/**\r\n\t * Test whether this requirement applies to the passed paths.\r\n\t *\r\n\t * @param {string[]} paths - Paths to test against.\r\n\t * @param {string[]} matchedPaths - Paths that have already been matched. Will be modified if true is returned.\r\n\t * @returns {boolean} Whether the requirement applies.\r\n\t */\r\n\tappliesToPaths( paths, matchedPaths ) {\r\n\t\tlet matches;\r\n\t\tif ( this.pathsFilter ) {\r\n\t\t\tmatches = paths.filter( p => this.pathsFilter( p ) );\r\n\t\t} else {\r\n\t\t\tmatches = paths.filter( p => ! matchedPaths.includes( p ) );\r\n\t\t\tif ( matches.length === 0 ) {\r\n\t\t\t\tcore.info( \"Matches files that haven't been matched yet, but all files have.\" );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( matches.length !== 0 ) {\r\n\t\t\tcore.info( 'Matches the following files:' );\r\n\t\t\tmatches.forEach( m => core.info( `   - ${ m }` ) );\r\n\t\t\tmatchedPaths.push( ...matches.filter( p => ! matchedPaths.includes( p ) ) );\r\n\t\t\tmatchedPaths.sort();\r\n\t\t}\r\n\r\n\t\treturn matches.length !== 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Test whether this requirement is satisfied.\r\n\t *\r\n\t * @param {string[]} reviewers - Reviewers to test against.\r\n\t * @returns {boolean} Whether the requirement is satisfied.\r\n\t */\r\n\tasync isSatisfied( reviewers ) {\r\n\t\tcore.info( 'Checking reviewers...' );\r\n\t\treturn ( await this.reviewerFilter( reviewers ) ).length > 0;\r\n\t}\r\n}\r\n\r\nmodule.exports = Requirement;\r\n","const core = require( '@actions/core' );\r\nconst github = require( '@actions/github' );\r\nconst { WError } = require( 'error' );\r\n\r\n/**\r\n * Fetch the reviewers approving the current PR.\r\n *\r\n * @returns {string[]} Reviewers.\r\n */\r\nasync function fetchReviewers() {\r\n\tconst octokit = github.getOctokit( core.getInput( 'token', { required: true } ) );\r\n\tconst owner = github.context.payload.repository.owner.login;\r\n\tconst repo = github.context.payload.repository.name;\r\n\tconst pr = github.context.payload.pull_request.number;\r\n\r\n\tconst reviewers = {};\r\n\ttry {\r\n\t\tfor await ( const res of octokit.paginate.iterator( octokit.pulls.listReviews, {\r\n\t\t\towner: owner,\r\n\t\t\trepo: repo,\r\n\t\t\tpull_number: pr,\r\n\t\t\tper_page: 100,\r\n\t\t} ) ) {\r\n\t\t\tres.data.forEach( review => {\r\n\t\t\t\tif ( review.state === 'APPROVED' ) {\r\n\t\t\t\t\treviewers[ review.user.login ] = true;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\t} catch ( error ) {\r\n\t\tthrow new WError(\r\n\t\t\t`Failed to query ${ owner }/${ repo } PR #${ pr } reviewers from GitHub`,\r\n\t\t\terror,\r\n\t\t\t{}\r\n\t\t);\r\n\t}\r\n\r\n\treturn Object.keys( reviewers ).sort();\r\n}\r\n\r\nmodule.exports = fetchReviewers;\r\n","const core = require( '@actions/core' );\r\nconst github = require( '@actions/github' );\r\nconst { WError } = require( 'error' );\r\n\r\nconst cache = {};\r\n\r\n/**\r\n * Fetch the members of a team.\r\n *\r\n * @param {string} team - GitHub team slug.\r\n * @returns {string[]} Team members.\r\n */\r\nasync function fetchTeamMembers( team ) {\r\n\tif ( cache[ team ] ) {\r\n\t\treturn cache[ team ];\r\n\t}\r\n\r\n\tconst octokit = github.getOctokit( core.getInput( 'token', { required: true } ) );\r\n\tconst org = github.context.payload.repository.owner.login;\r\n\r\n\tlet members = [];\r\n\ttry {\r\n\t\tfor await ( const res of octokit.paginate.iterator( octokit.teams.listMembersInOrg, {\r\n\t\t\torg: org,\r\n\t\t\tteam_slug: team,\r\n\t\t\tper_page: 100,\r\n\t\t} ) ) {\r\n\t\t\tmembers = members.concat( res.data.map( v => v.login ) );\r\n\t\t}\r\n\t} catch ( error ) {\r\n\t\tthrow new WError( `Failed to query ${ org } team ${ team } from GitHub`, error, {} );\r\n\t}\r\n\r\n\tcache[ team ] = members;\r\n\treturn members;\r\n}\r\n\r\nmodule.exports = fetchTeamMembers;\r\n",null,"module.exports = require(\"assert\");;","module.exports = require(\"fs\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n__webpack_require__.ab = __dirname + \"/\";","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(191);\n"],"mappingsrzvMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACvCA;AACA;AACA;A;;;;;AAFA;AACA;AACA;A;;;;;AAFA;AACA;AACA;A;;;;;AAFA;AACA;AACA;A;;;;;AAFA;AACA;AACA;A;;;;;;ACFA;AACA;A;;;;;;ACDA;AACA;A;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;ACDA;AACA;AACA;AACA;;A","sourceRoot":""}